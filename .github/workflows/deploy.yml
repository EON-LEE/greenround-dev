name: Deploy to Cloud Run!

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 수동 실행 가능

env:
  GCP_USE_GPU: true
  GCP_GPU_TYPE: nvidia-l4
  GCP_GPU_COUNT: 1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 코드 체크아웃
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    # 2. 저장소의 .env 파일에서 환경 변수 로드 및 GCP 인증 설정
    - name: 🔍 Load environment from .env file and setup GCP credentials
      run: |
        echo "🔧 저장소의 .env 파일에서 환경 변수 로드 중..."
        
        # .env 파일 존재 확인
        if [ ! -f ".env" ]; then
          echo "❌ ERROR: .env 파일을 찾을 수 없습니다!"
          echo "저장소 루트에 .env 파일이 있는지 확인하세요."
          exit 1
        fi
        
        echo "✅ .env 파일 발견, 내용 확인:"
        cat .env
        echo ""
        
        # .env 파일에서 환경 변수 추출 및 GitHub Actions 환경으로 설정
        echo "🔄 .env 파일에서 환경 변수 추출 중..."
        
        # .env 파일의 각 변수를 GitHub Actions 환경으로 설정
        while IFS= read -r line; do
          # 주석과 빈 줄 제외
          if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "${line// }" ]]; then
            continue
          fi
          
          # KEY=VALUE 형태 추출
          if [[ "$line" =~ ^[[:space:]]*([A-Za-z_][A-Za-z0-9_]*)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            
            # 따옴표 제거
            value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//")
            
            echo "📝 설정: $key=$value"
            echo "$key=$value" >> $GITHUB_ENV
          fi
        done < .env
        
        # Secrets 검증
        if [ -z "${{ secrets.GCP_CREDENTIALS }}" ]; then
          echo "❌ ERROR: GCP_CREDENTIALS secret이 설정되지 않았습니다!"
          echo "GitHub Repository → Settings → Secrets에서 GCP_CREDENTIALS를 설정하세요."
          echo "gcs-credentials.json 파일의 전체 내용을 복사해서 넣으세요."
          exit 1
        fi
        
        # GCP 서비스 계정 키 파일 생성 (기존 파일 덮어쓰기)
        echo '${{ secrets.GCP_CREDENTIALS }}' > gcs-credentials.json
        echo "✅ GCP 인증 파일 생성 완료"
        
        # JSON에서 프로젝트 ID 추출하여 확인
        CREDENTIALS_PROJECT_ID=$(cat gcs-credentials.json | python3 -c "import sys, json; print(json.load(sys.stdin)['project_id'])")
        CLIENT_EMAIL=$(cat gcs-credentials.json | python3 -c "import sys, json; print(json.load(sys.stdin)['client_email'])")
        
        echo ""
        echo "🔍 설정 확인:"
        echo "📧 서비스 계정: $CLIENT_EMAIL"
        echo "🎯 Credentials 프로젝트 ID: $CREDENTIALS_PROJECT_ID"
        echo "🔧 GPU 사용: ${{ env.GCP_USE_GPU }}"
        
        # 프로젝트 ID 일치 확인
        ENV_PROJECT_ID=$(grep "^GCP_PROJECT_ID=" .env | cut -d'=' -f2 | sed -e 's/^"//' -e 's/"$//')
        if [ "$ENV_PROJECT_ID" != "$CREDENTIALS_PROJECT_ID" ]; then
          echo "⚠️ WARNING: .env의 프로젝트 ID($ENV_PROJECT_ID)와 인증 파일의 프로젝트 ID($CREDENTIALS_PROJECT_ID)가 다릅니다!"
          echo "🔄 인증 파일의 프로젝트 ID로 통일합니다."
          echo "GCP_PROJECT_ID=$CREDENTIALS_PROJECT_ID" >> $GITHUB_ENV
        fi
        
        echo "CLIENT_EMAIL=$CLIENT_EMAIL" >> $GITHUB_ENV
        echo "✅ 환경 변수 및 인증 파일 설정 완료"
    
    # 3. GCP 인증
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
    
    # 4. Cloud SDK 설치
    - name: ☁️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
    
    # 5. Docker Buildx 설정
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # 6. 배포 스크립트 실행 권한 부여
    - name: 🔑 Make deploy script executable
      run: chmod +x ./deploy_to_gcp.sh
    
    # 7. 초기 설정 (API 활성화, 저장소 생성)
    - name: ⚙️ Run initial setup
      run: |
        echo "🚀 GCP 초기 설정 실행 중..."
        ./deploy_to_gcp.sh --setup
    
    # 8. 배포 실행 (브랜치별 분기)
    - name: 🚀 Deploy to Cloud Run
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "📝 PR 빌드: 이미지 빌드만 수행"
          ./deploy_to_gcp.sh --build-only
        else
          echo "🌟 메인/개발 브랜치: 전체 배포 수행"
          ./deploy_to_gcp.sh
        fi
    
    # 9. 배포 결과 확인 (메인 브랜치만)
    - name: ✅ Check deployment status
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🔍 배포 상태 확인 중..."
        ./deploy_to_gcp.sh --status
    
    # 10. 배포 URL 및 결과 출력
    - name: 🎉 Display deployment results
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🎯 배포 결과 조회 중..."
        SERVICE_URL=$(gcloud run services describe ${GCP_SERVICE_NAME} \
          --region=${GCP_REGION} \
          --format='value(status.url)')
        
        echo "=================================================="
        echo "🚀 배포 완료!"
        echo "📍 서비스 URL: $SERVICE_URL"
        echo "📚 API 문서: $SERVICE_URL/docs"
        echo "🏥 헬스체크: $SERVICE_URL/api/health"
        echo "=================================================="
        
        # GitHub Actions 알림
        echo "::notice title=🎉 배포 성공::서비스가 성공적으로 배포되었습니다: $SERVICE_URL"
        
        # API 응답 테스트
        echo "🧪 API 응답 테스트 중..."
        if curl -s --max-time 10 "$SERVICE_URL/api/health" > /dev/null; then
          echo "✅ API 서비스가 정상적으로 응답합니다."
          echo "::notice title=✅ API 테스트::API 서비스가 정상 작동 중입니다"
        else
          echo "⚠️ API 서비스 응답을 확인할 수 없습니다."
          echo "::warning title=⚠️ API 테스트::API 응답을 확인할 수 없습니다"
        fi 